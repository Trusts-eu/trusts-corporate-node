version: '3.5'

volumes:
  ckan_storage:
  pg_data:
  solr_data:
  dataspaceconnector-data:

services:

  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - 5432
    environment:
      - POSTGRES_USER=${LOCAL_DSC_POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${LOCAL_DSC_POSTGRES_PASSWORD}
      - POSTGRES_DB=${LOCAL_DSC_POSTGRES_DB}
    networks:
      - internal-net
      - ids-wide
    volumes:
      - dataspaceconnector-data:/var/lib/postgresql/data


  ckan-dev:
    container_name: ${CKAN_CONTAINER_NAME}
    build:
      context: ckan/
      dockerfile: Dockerfile.dev
      args:
        - TZ=${TZ}
    env_file:
      - .env
    links:
      - db
      - solr
      - redis
      - dsc
    depends_on:
      db:
        condition: service_healthy
      solr:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "0.0.0.0:${CKAN_PORT_HOST}:${CKAN_PORT}"
    volumes:
      - ckan_storage:/var/lib/ckan
      - ./schemas:/schemas
      - ./licenses.json:/etc/ckan/licenses.json
      - ./../trustshosts:/etc/hosts
      - ./src:/srv/app/src_extensions
    restart: unless-stopped
    environment:
      - CKAN__PLUGINS=envvars image_view text_view trusts_dev
    healthcheck:
      test: [ "CMD", "wget", "-qO", "/dev/null", "http://localhost:5000" ]
    networks:
      - internal-net
      - ids-wide

  db:
    image: trusts/ckan-db:2.9-p12
    container_name: ${POSTGRESQL_CONTAINER_NAME}
    environment:
      - DATASTORE_READONLY_PASSWORD=${DATASTORE_READONLY_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/db
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "ckan" ]
    networks:
      - internal-net

  solr:
    container_name: ${SOLR_CONTAINER_NAME}
    image: trusts/ckan-solr:2.9-solr8
    volumes:
      - solr_data:/var/solr
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "-qO", "/dev/null", "http://localhost:8983/solr/" ]
    networks:
      - internal-net

  redis:
    container_name: ${REDIS_CONTAINER_NAME}
    image: redis:${REDIS_VERSION}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-e", "QUIT"]
    networks:
      - internal-net

  dsc:
    image: ghcr.io/international-data-spaces-association/dataspace-connector:8.0.2
    container_name : ${LOCAL_NODE_NAME}
    ports:
      - 8282:8080
    networks:
      ids-wide:
        aliases:
          - repository.aisec.fraunhofer.de
      internal-net:
        aliases:
          - repository.trusts.eu
    volumes:
      - ./../trustshosts:/etc/hosts
      - ./idscert/:/conf/
      - ./config.json:/config/config.json
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${LOCAL_DSC_POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${LOCAL_DSC_POSTGRES_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${LOCAL_DSC_POSTGRES_PASSWORD}
      - SPRING_DATASOURCE_PLATFORM=postgres
      - SPRING_DATASOURCE_DRIVERCLASSNAME=org.postgresql.Driver
      - SPRING_JPA_DATABASEPLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SERVER_SSL_ENABLED=false
      - CONFIGURATION_PATH=/config/config.json
      - BOOTSTRAP_ENABLED=false
      - DAPS_KEY_URL=${DAPS_URL}/auth/jwks.json
      - DAPS_INCOMING_DAT_DEFAULT_WELLKNOWN=/jwks.json
      - SERVER_SSL_KEY-STORE=file:///conf/${LOCAL_NODE_NAME}.p12
      - DAPS_TOKEN_URL=${DAPS_URL}/auth/token

  note-service:
    container_name: note-service
    image: nfourlat/note-service:latest
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:5055
      - DOTNET_RUNNING_IN_CONTAINER=true
    volumes:
      - ../logs/:/root/logs/
      - ./appsettings.json:/app/appsettings.json
    ports:
      - "0.0.0.0:5055:5055"
    networks:
      - internal-net

networks:
  ids-wide:
    name: ids-wide
    external: true

  internal-net:
    driver: bridge
